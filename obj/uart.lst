C251 COMPILER V5.60.0,  uart                                                               12/11/24  09:53:27  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE uart
OBJECT MODULE PLACED IN .\obj\uart.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Hardware\Uart\uart.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Us
                    -er;.\Hardware\CalcDoseRate;.\Hardware\Cmd;.\Hardware\Flash;.\Hardware\IIC;.\Hardware\Mcp4725;.\Hardware\Sensor;.\Hardwar
                    -e\System;.\Hardware\Uart;.\User;.\Hardware\BatVoltage;.\Hardware\DoseRate;.\Hardware\CalcCps;.\Hardware\CRC;.\Hardware\Q
                    -ueue) PRINT(.\obj\uart.lst) OBJECT(.\obj\uart.obj) 

stmt  level    source

    1          #include "uart.h"
    2          #include "system.h"
    3          #include <stdio.h>
    4          #include <string.h>
    5          #include "CMD.h"
    6          
    7          
    8          u8  TX1_Cnt;            //发送计数
    9          u8  RX1_Cnt;            //接收计数
   10          bit B_TX1_Busy;         //发送忙标志
   11          u16 Rx1_Timer  = 0;
   12          u8  revFlag = 0;
   13          
   14          u8  TX3_Cnt;            //发送计数
   15          u8  RX3_Cnt;            //接收计数
   16          bit B_TX3_Busy;         //发送忙标志
   17          u16 Rx3_Timer  = 0;
   18          
   19          
   20          u8  RX1_Buffer[MAX_LENGTH]; //接收缓冲
   21          u8  RX3_Buffer[MAX_LENGTH]; //接收缓冲
   22          
   23          
   24          
   25          //========================================================================
   26          // 函数名称: void Uart1_Init(void)
   27          // 函数功能: UART0初始化,9600位波特率/秒,8位字符,1位停止位,无校验.
   28          // 入口参数: @无
   29          // 函数返回: 无
   30          // 当前版本: VER1.0
   31          // 修改日期: 2023.5.5
   32          // 当前作者:
   33          // 其他备注: 波特率9600,时钟源选择为ACLK.误码率可能会大些.
   34          //           用户可选择其他高频时钟源.高频时钟会使波特率的误码率降低.
   35          //========================================================================
   36          void Uart1_Init(void)           //9600bps@11MHz
   37          {  
   38   1          /*********** 波特率使用定时器1 *****************/
   39   1          {
   40   2              TR1 = 0;
   41   2              AUXR &= ~0x01;      //S1 BRT Use Timer1;
   42   2              AUXR |=  (1<<6);    //Timer1 set as 1T mode
   43   2              TMOD &= ~(1<<6);    //Timer1 set As Timer
   44   2              TMOD &= ~0x30;      //Timer1_16bitAutoReload;
   45   2              TH1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate3) / 256);      //_11MHz
   46   2              TL1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate3) % 256);
   47   2              
   48   2              ET1 = 0;    //禁止中断
   49   2              INTCLKO &= ~0x02;  //不输出时钟
   50   2              TR1  = 1;
   51   2          }
   52   1      
   53   1          /*************************************************/
   54   1          //UART1模式, 0x00: 同步移位输出, 0x40: 8位数据,可变波特率, 
   55   1          //           0x80: 9位数据,固定波特率, 0xc0: 9位数据,可变波特率 
   56   1      
C251 COMPILER V5.60.0,  uart                                                               12/11/24  09:53:27  PAGE 2   

   57   1          SCON = (SCON & 0x3f) | 0x40; 
   58   1          ES  = 1;            //允许中断
   59   1          REN = 1;
   60   1          PS  = 0;            //中断高优先级
   61   1          PSH = 0;
   62   1      
   63   1          //UART1 switch to, 0x00: P3.0 P3.1, 0x40: P3.6 P3.7, 
   64   1          //                 0x80: P1.6 P1.7, 0xC0: P4.3 P4.4
   65   1          P_SW1 &= 0x3f;
   66   1          P_SW1 |= 0x00;  
   67   1          
   68   1          B_TX1_Busy = 0;
   69   1          TX1_Cnt = 0;
   70   1          RX1_Cnt = 0;
   71   1      }
   72          
   73          
   74          //重定向Printf
   75          char putchar(char c )
   76          {
   77   1          SBUF = c;
   78   1          while(!TI);
   79   1          TI = 0;
   80   1          return c;
   81   1      }
   82          
   83          void UART1_ISR (void) interrupt 4
   84          {
   85   1          if(RI)
   86   1          {
   87   2              RI = 0;
   88   2              Rx1_Timer = 0;
   89   2              RX1_Buffer[RX1_Cnt] = SBUF;
   90   2              if(++RX1_Cnt >= MAX_LENGTH)   
   91   2              {
   92   3                  RX1_Cnt = 0;
   93   3              }
   94   2          }
   95   1      
   96   1          if(TI)
   97   1          {
   98   2              TI = 0;
   99   2              B_TX1_Busy = 0;
  100   2          }
  101   1      }
  102          
  103          
  104          //========================================================================
  105          // 函数名称: void uart_send(u8 *buf, u8 len)
  106          // 函数功能: 串口发送函数
  107          // 入口参数: @*buf：发送的数据；@len：数据长度
  108          // 函数返回: 无
  109          // 当前版本: VER1.0
  110          // 修改日期: 2023.5.5
  111          // 当前作者:
  112          // 其他备注: 
  113          //========================================================================
  114          void Uart3_Init(void)           //9600bps@MHz
  115          {
  116   1          S3CON = 0x10;       //8位数据,可变波特率
  117   1          S3CON &= 0xBF;      //串口3选择定时器2为波特率发生器
  118   1          AUXR |= 0x04;       //定时器时钟1T模式
  119   1          T2H = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate3)/ 256);
  120   1          T2L = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate3)% 256);
  121   1          //T2L = 0xE0;         //设置定时初始值
  122   1          //T2H = 0xFE;         //设置定时初始值
C251 COMPILER V5.60.0,  uart                                                               12/11/24  09:53:27  PAGE 3   

  123   1          
  124   1      //    T2L = 0xE8;         //设置定时初始值 115200
  125   1      //    T2H = 0xFF;         //设置定时初始值
  126   1          AUXR |= 0x10;       //定时器2开始计时
  127   1          IE2 |= 0x08;        //使能串口3中断
  128   1      
  129   1          // 中断优先级
  130   1          PS3H = 1;
  131   1          PS3 = 0;
  132   1          P_SW2 &= ~0x02; 
  133   1      
  134   1          B_TX3_Busy = 0;
  135   1          TX3_Cnt = 0;
  136   1          RX3_Cnt = 0;
  137   1      }
  138          
  139          void UART3_ISR (void) interrupt 17
  140          {
  141   1          if(S3RI)
  142   1          {
  143   2              S3RI = 0;
  144   2              Rx3_Timer = 0;
  145   2              RX3_Buffer[RX3_Cnt] = S3BUF;
  146   2              if(++RX3_Cnt >= MAX_LENGTH)   
  147   2              {
  148   3                  RX3_Cnt = 0;
  149   3              }
  150   2          }
  151   1      
  152   1          if(S3TI)
  153   1          {
  154   2              S3TI = 0;
  155   2              B_TX3_Busy = 0;
  156   2          }
  157   1      }
  158          
  159          void Uart_send(u8 *buf,  u8 len)
  160          {
  161   1          u8 i;
  162   1          //Uart485_EN(1);
  163   1          for (i=0;i<len;i++)     
  164   1          {
  165   2              SBUF = buf[i];
  166   2              B_TX1_Busy = 1;
  167   2              while(B_TX1_Busy);
  168   2          }
  169   1          //Uart485_EN(0);
  170   1      }
  171          
  172          
  173          void uart485_send(u8 *buf, u8 len)
  174          {
  175   1          u8 i;
  176   1          Uart485_EN(1);
  177   1          for (i=0;i<len;i++)     
  178   1          {
  179   2              S3BUF = buf[i];
  180   2              B_TX3_Busy = 1;
  181   2              while(B_TX3_Busy);
  182   2          }
  183   1          Uart485_EN(0);
  184   1      }
  185          
  186          void Uart3Hnd(void)
  187          {
  188   1          if (Rx3_Timer > 20)
C251 COMPILER V5.60.0,  uart                                                               12/11/24  09:53:27  PAGE 4   

  189   1          {
  190   2              Rx3_Timer = 0;
  191   2              //printf("进入UART3\r\n");
  192   2              DataPro(RX3_Buffer,RX3_Cnt);
  193   2              ClearRs485Buf();
  194   2          }
  195   1      }
  196          
  197          
  198          
  199          void ClearRs485Buf()
  200          {
  201   1          memset(RX3_Buffer,0,MAX_LENGTH);
  202   1          RX3_Cnt = 0;
  203   1      }
  204          
  205          void ClearUartBuf()
  206          {
  207   1          memset(RX1_Buffer,0,MAX_LENGTH);
  208   1          RX1_Cnt = 0;
  209   1      }
  210          
  211          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       508     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       422     ------
  bit size             =         2     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        17     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
