C251 COMPILER V5.60.0,  Queue                                                              03/09/24  13:56:04  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Queue
OBJECT MODULE PLACED IN .\obj\Queue.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Hardware\Queue\Queue.c XSMALL INTR2 OPTIMIZE(0,SPEED) BROWSE INCDIR(.\
                    -User;.\Hardware\CalcDoseRate;.\Hardware\Cmd;.\Hardware\Flash;.\Hardware\IIC;.\Hardware\Mcp4725;.\Hardware\Sensor;.\Hardw
                    -are\System;.\Hardware\Uart;.\User;.\Hardware\BatVoltage;.\Hardware\DoseRate;.\Hardware\CalcCps;.\Hardware\CRC;.\Hardware
                    -\Queue) PRINT(.\obj\Queue.lst) OBJECT(.\obj\Queue.obj) 

stmt  level    source

    1          //#include <msp430x21x2.h>
    2          #include <stdio.h>
    3          #include <stdlib.h>
    4          #include <string.h>
    5          #include "Queue.h"
    6          
    7          #if 0
               //置空队
               void InitQueue(squlink Q, unsigned int nSize)
               {
                   if (!Q)
                   {
                       return;
                   }
                   
                   Q->nFront = 0;
                   Q->nRear = 0;
                   //队列的最大长度:循环队列，不使用1个元素 
                   if (nSize > MAX_SQUEUE_SIZE)
                   {
                        nSize = MAX_SQUEUE_SIZE ;
                   }
                   Q->nSize = nSize+1;
               }
               
               //判断队列是否为空 
               int IsEmptyQueue(squlink Q)
               {
                   int bRet = 0;
                    
                   if (!Q)
                   {
                       return 1;
                   }
                   
                   if(Q->nFront == Q->nRear)
                   {
                       bRet = 1;
                   }
                   else
                   {
                       bRet = 0;
                   }
                   
                   return bRet;
               }
               
               int IsFullQueue(squlink Q)
               {
                   int bRet = 0;
                    
                   if (!Q)
                   {
                       return 1;
                   }
                   
C251 COMPILER V5.60.0,  Queue                                                              03/09/24  13:56:04  PAGE 2   

                   if(((Q->nRear + 1) % Q->nSize) == Q->nFront)
                   {
                       bRet = 1;
                   }
                   else
                   {
                       bRet = 0;
                   }
                   
                   return bRet;
               }
               
               //进队
               int EnterQueue(squlink Q,DataType e)
               {
                   if (!Q)
                   {
                       return 0;
                   }
                   
                   //队满,则将读指针后移一位
                   if(((Q->nRear + 1) % Q->nSize) == Q->nFront)
                   {
                       Q->nFront = (Q->nFront + 1) % Q->nSize;
                   }
                   
                   Q->data[Q->nRear] = e;
                   Q->nRear = (Q->nRear + 1) % Q->nSize;
                  
                   return 1;
               }
               
               //出队
               int DeQueue(squlink Q, DataType*  e)
               {
                   if (!Q)
                   {
                       return 0;
                   }
                   
                   int bRet = 0;
                   //队空
                   if(IsEmptyQueue(Q))
                   {
                       bRet = 0;
                   }
                   else
                   {
                       *e = Q->data[Q->nFront];
                       Q->nFront = (Q->nFront+1) % Q->nSize;
                       bRet = 1;
                   }
                   
                   return bRet;
               }
               
               //队Q中当前元素个数
               int Lenqueue(squlink Q)
               {
                   int i = 0;
                   if (!Q)
                   {
                       return 0;
                   }
                   
                   i = (Q->nRear - Q->nFront + Q->nSize) % Q->nSize;
C251 COMPILER V5.60.0,  Queue                                                              03/09/24  13:56:04  PAGE 3   

                   
                   return(i);
               }
               
               
               //栈接口
               //退栈
               int DeStack(squlink Q, DataType*  e)
               {
                   if (!Q)
                   {
                       return 0;
                   }
                   
                   int bRet = 0;
                   //队空
                   if(IsEmptyQueue(Q))
                   {
                       bRet = 0;
                   }
                   else
                   {
                       Q->nRear = (Q->nRear - 1 + Q->nSize) % Q->nSize;
                       *e = Q->data[Q->nRear];
                       bRet = 1;
                   }
                   
                   return bRet;
               }
               
               
               // 前N个数总和（不出队）
               DataType SumFront(squlink Q, int nCnt)
               {
                   if (!Q || Lenqueue(Q) < nCnt)
                   {
                       return 0;
                   }
                   DataType nSum = 0;
                   for(int i = 0; i < nCnt; i++)
                   {
                       nSum += Q->data[((Q->nFront+i) % Q->nSize)];
                   }
                   
                   return nSum;
               }
               
               // 后N个数总和（不出队）
               DataType SumRear(squlink Q, int nCnt)
               {
                   if (!Q || Lenqueue(Q) < nCnt)
                   {
                       return 0;
                   }
                   DataType nSum = 0;
                   for(int i = 0; i < nCnt; i++)
                   {
                       nSum += Q->data[((Q->nRear - 1 - i + Q->nSize) % Q->nSize)];
                   }
                   
                   return nSum;
               }
               
               
               // 从头读取第N个数据:1,2...n
               DataType GetElement(squlink Q, int nOrder)
C251 COMPILER V5.60.0,  Queue                                                              03/09/24  13:56:04  PAGE 4   

               {
                   if (!Q || Lenqueue(Q) <= 0)
                   {
                       return 0;
                   }
                   
                   DataType nRet = 0;
                   nRet = Q->data[((Q->nFront + nOrder - 1) % Q->nSize)];
                   return nRet;
               }
               //设置队列长度
               void SetQLength(squlink Q, int cnt)
               {
                       Q->nFront = (Q->nSize + Q->nRear - cnt)% Q->nSize;
               }
               
               // 设置
               int SetElement(squlink Q, int nOrder, DataType value)
               {
                   if (!Q)
                   {
                       return 0;
                   }
                   
                   int index = (Q->nFront + nOrder - 1) % Q->nSize;
                   if (index == Q->nRear)
                   {
                     return 0;
                   }
                   Q->data[index] = value;
                   return 1;
               }
               #endif
  222          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
